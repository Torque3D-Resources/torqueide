/*
 *  DebuggerPlugin.java
 *  Copyright (c) 2002 Paul Dana
 *  some GUI code patterned after the java Debugger plugin by Dirk Moebius
 *
 *  :tabSize=4:indentSize=4:noTabs=false:maxLineLen=0:
 *
 *  This program is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU General Public License
 *  as published by the Free Software Foundation; either version 2
 *  of the License, or any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.	See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA	02111-1307, USA.
 */

package com.garagegames.torque.tidedebug;

import java.io.File;
import java.io.IOException;
import java.util.Vector;
import javax.swing.*;

import org.gjt.sp.jedit.*;
import org.gjt.sp.jedit.msg.EditPaneUpdate;
import org.gjt.sp.jedit.msg.ViewUpdate;
import org.gjt.sp.jedit.textarea.JEditTextArea;
import org.gjt.sp.util.Log;

import com.garagegames.torque.tide.*;

/**
 *  Description of the Class
 *
 *@author     beffy
 *@created    26. August 2004
 */
public class TideDebugPlugin extends EBPlugin {
   // keeps track of our singleton
   /**
    *  Description of the Field
    */
   protected TideDebug tideDebug;

   /**
    *  The menu property for this plugin
    */
   //public final static String MENU = "tidedebug.menu";
   public final static String MENU = "plugin.com.garagegames.torque.tidedebug.TideDebugPlugin.menu";


   /**
    *  Description of the Method
    */
   public void start() {
      /*
       *  if(!MiscUtilities.isToolsJarAvailable())
       *  {
       *  / I can't live without my tools.jar:
       *  throw new UnsupportedOperationException(
       *  "Could not find library tools.jar!\n"
       *  + "This library is essential for running the Debugger plugin.\n"
       *  + "It usually resides in {java.home}/lib/.\n"
       *  + "Your java.home is " + System.getProperty("java.home") + "\n"
       *  + "A common cause of this error is that jEdit was\n"
       *  + "launched through a JRE instead of a JDK.\n"
       *  + "It doesn't help to add it to the CLASSPATH.\n"
       *  + "Try adding it to jEdit's jars/ folder.");
       *  }
       */
      tideDebug = TideDebug.createTideDebug(this, Tide.getInstance());
   }


   /**
    *  Description of the Method
    */
   public void stop() {
   }

   /**
    *  Handle messages allows us to respond to particular messages generated by
    *  jEdit and send on the EditBus.
    *
    *@param  message  Description of the Parameter
    */
   public void handleMessage(EBMessage message) {
      if (message == null) {
         return;
      }

      if (message instanceof ViewUpdate) {
         try {
            // add debugger toolbar to new views:
            ViewUpdate vmsg = (ViewUpdate) message;
            if (vmsg != null && vmsg.getView() != null && vmsg.getWhat() == ViewUpdate.CREATED) {
               vmsg.getView().addToolBar(new TideDebugToolbar(vmsg.getView(), Tide.getInstance(), tideDebug));
            }
         } catch (Exception ex) {
            System.err.println("Error in TIDEDebug Plugin - couldnt add debugger toolbar: " + ex.getMessage());
            ex.printStackTrace();
         }
      } else if (message instanceof EditPaneUpdate) {
         try {
            EditPaneUpdate emsg = (EditPaneUpdate) message;
            if (emsg != null && emsg.getWhat() == EditPaneUpdate.CREATED) {
               JEditTextArea textArea = emsg.getEditPane().getTextArea();
               if (textArea != null && Tide.getInstance() != null) {
                  //System.err.println("Tide.getInstance(): " + Tide.getInstance());
                  textArea.getGutter().addExtension(new BreakpointHighlight(Tide.getInstance(), textArea));
                  textArea.getPainter().addExtension(new CurrentLineHighlight(Tide.getInstance(), textArea));
                  textArea.getPainter().addExtension(new EvaluationToolTip(Tide.getInstance(), textArea));
               }
            }
         } catch (Exception ex) {
            System.err.println("Error in TIDEDebug Plugin - couldnt register extensions: " + ex.getMessage());
            ex.printStackTrace();
         }
      }
   }
}


